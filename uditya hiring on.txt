import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Candidate{

  private int id;
	private String name;
	private int age;
	private String gender;
	private String department;
	private int yearOfJoining;
	private double salary;
	
	public Candidate() {
	}

	public Candidate(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
		this.department = department;
		this.yearOfJoining = yearOfJoining;
		this.salary = salary;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public int getYearOfJoining() {
		return yearOfJoining;
	}

	public void setYearOfJoining(int yearOfJoining) {
		this.yearOfJoining = yearOfJoining;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

     @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", age=" + age + ", gender=" + gender + ", department="
                + department + ", yearOfJoining=" + yearOfJoining + ", salary=" + salary + "]";
    }
}

class Implementation{
 public static Map<String, Long> getCount(List<Candidate> list) {
		Map<String, Long> genderCount = new HashMap<>();
		Long maleCount = 0L;
		Long femaleCount = 0L;
		for(Candidate candidate : list) {
			if(candidate.getGender().equalsIgnoreCase("male")==true) {
				maleCount+=1;
			}
			else {
				femaleCount+=1;
			}
		}
		genderCount.put("Male", maleCount);
		genderCount.put("Female", femaleCount);
		return genderCount;
		
	}
	
	public static Map<String, Double> getAverageAge(List<Candidate> list) {
		Map<String, Double> avgAge = new HashMap<>();
		int maleCount = 0;
		int femaleCount = 0;
		int maleAgeSum = 0;
		int femaleAgeSum = 0;
		
		for(Candidate candidate : list) {
			if(candidate.getGender().equalsIgnoreCase("male")==true) {
				maleCount+=1;
				maleAgeSum+=candidate.getAge();
			}
			else {
				femaleCount+=1;
				femaleAgeSum+=candidate.getAge();
			}
		}
		
		Double maleAvgAge = (double) (maleAgeSum/maleCount);
		Double femaleAvgAge = (double)(femaleAgeSum/femaleCount);
		
		avgAge.put("Female", femaleAvgAge);
		avgAge.put("Male", maleAvgAge);
		return avgAge;
		
	}
	
	public static Map<String, Long> countCandidatesDepartmentWise(List<Candidate> list) {
		Map<String, Long> deptCountMap = new HashMap<>();
		Set<String> uniqueDepartment = new TreeSet<>();
		for(Candidate candidate : list) {
			uniqueDepartment.add(candidate.getDepartment());
		}
		for(String dept : uniqueDepartment) {
			Long deptCount = 0L;
			for(Candidate candidate : list) {
				if(candidate.getDepartment().equalsIgnoreCase(dept)==true) {
					deptCount+=1;
				}
			}
			deptCountMap.put(dept, deptCount);
			
		}
		return deptCountMap;
		
	}
	
	public static Optional<Candidate> getYoungestCandidateDetails(List<Candidate> list) {
		Collections.sort(list, (o1, o2) -> (o1.getAge() - o2.getAge()));
//		int minAge = list.get(0).getAge();
		
		Optional<Candidate> minAgeCandidate = Optional.of(list.get(0));
		return minAgeCandidate;
		
	}
}

public class Source {
	public static void main(String args[] ) throws Exception {
		/* Enter your code here. Read input from STDIN. Print output to STDOUT */
	}
}